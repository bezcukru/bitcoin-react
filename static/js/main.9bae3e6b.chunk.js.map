{"version":3,"sources":["components/CryptoList.jsx","components/Crypto.jsx","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","cryptoList","cryptoArray","map","cryptoElement","key","currency","className","class","last","symbol","Crypto","getCryptoData","axios","get","then","res","crypto","data","convertedCryptoArray","i","newCryptoObj","prevCryptoObj","state","undefined","push","setState","filteredCryptoArray","filterCurrency","trimmedValue","filterInput","value","trim","toUpperCase","filteredCrypto","filter","elem","includes","console","log","this","setInterval","type","placeholder","onChange","ref","input","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAmBeA,EAjBI,SAAAC,GAEf,IAAIC,EAAaD,EAAME,YAAYC,KAAI,SAAAC,GACnC,OACI,wBAAIC,IAAKD,EAAcE,UAAWF,EAAcE,SAAhD,eAAqE,0BAAMC,UAAWH,EAAcI,OAAQJ,EAAcK,MAA1H,KAAyIL,EAAcM,OAAvJ,QAGR,OACI,6BAEI,wBAAIH,UAAU,eACTN,KC+DFU,E,YAvEX,aAAe,IAAD,8BACV,+CAMJC,cAAgB,WACZC,IAAMC,IAAN,qCACCC,MAAK,SAAAC,GACJ,IAAMC,EAASD,EAAIE,KACfC,EAAuB,GACvBC,EAAI,EAER,IAAI,IAAIf,KAAOY,EAAQ,CACnB,IAAII,EAAeJ,EAAOZ,GACtBiB,EAAgB,EAAKC,MAAMrB,YAAYkB,QAGvBI,IAAjBF,EACEA,EAAcb,KAAOY,EAAaZ,KACjCY,EAAab,MAAQ,MACdc,EAAcb,KAAOY,EAAaZ,KACzCY,EAAab,MAAQ,QAErBa,EAAab,MAAQ,OAGvBa,EAAab,MAAQ,OAKzBa,EAAaf,SAAWD,EAGxBc,EAAqBM,KAAKJ,GAC1BD,IAGJ,EAAKM,SAAS,CAACxB,YAAaiB,EAAsBQ,oBAAqBR,QAxC/D,EA4CdS,eAAiB,WAEb,IAAIC,EAAe,EAAKC,YAAYC,MAAMC,OAAOC,cAE7CC,EADgB,EAAKX,MAAMrB,YACIiC,QAAO,SAAAC,GACtC,OAAOA,EAAK9B,SAAS+B,SAASR,MAElC,EAAKH,SAAS,CAACC,oBAAqBO,IACpCI,QAAQC,IAAIV,IAlDZ,EAAKN,MAAQ,CACTrB,YAAa,GACbyB,oBAAqB,IAJf,E,iFAuDO,IAAD,OAChBa,KAAK5B,gBACL6B,aAAY,WAAO,EAAK7B,kBAAkB,O,+BAGpC,IAAD,OAEL,OACI,6BACA,2BAAO8B,KAAK,OAAOC,YAAY,aAAaC,SAAUJ,KAAKZ,eAAgBiB,IAAK,SAAAC,GAAK,OAAI,EAAKhB,YAAcgB,KAC5G,kBAAC,EAAD,CAAY5C,YAAasC,KAAKjB,MAAMI,oBAAqBC,eAAgBY,KAAKZ,sB,GAlErEmB,IAAMC,WCWZC,MAXf,WACE,OACE,yBAAK1C,UAAU,OACb,4BAAQA,UAAU,cACjB,wCAED,kBAAC,EAAD,QCEc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.9bae3e6b.chunk.js","sourcesContent":["import React from 'react';\n\nconst CryptoList = props => {\n    \n    let cryptoList = props.cryptoArray.map(cryptoElement => {\n        return (\n            <li key={cryptoElement.currency}>{cryptoElement.currency} Last rate: <span className={cryptoElement.class}>{cryptoElement.last}</span> [{cryptoElement.symbol}]</li>\n        )\n    })\n    return (\n        <div>\n           \n            <ul className=\"crypto-list\">\n                {cryptoList}\n            </ul>\n        </div>\n    )\n}\n\nexport default CryptoList;","import React from 'react';\nimport axios from 'axios';\nimport CryptoList from './CryptoList';\n\nclass Crypto extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            cryptoArray: [],\n            filteredCryptoArray: []\n        } \n    }\n    getCryptoData = () => {\n        axios.get(`https://blockchain.info/pl/ticker`)\n        .then(res => {\n          const crypto = res.data;\n          let convertedCryptoArray = [];\n          let i = 0;\n         \n          for(let key in crypto) {\n              let newCryptoObj = crypto[key];\n              let prevCryptoObj = this.state.cryptoArray[i];\n              \n\n              if(prevCryptoObj!== undefined) {\n                if(prevCryptoObj.last > newCryptoObj.last) {\n                    newCryptoObj.class = \"red\"\n                } else if (prevCryptoObj.last < newCryptoObj.last){\n                    newCryptoObj.class = \"green\"\n                } else {\n                    newCryptoObj.class = \"blue\"\n                }\n              } else {\n                  newCryptoObj.class = \"blue\"\n              };\n\n            \n\n              newCryptoObj.currency = key;\n              \n              \n              convertedCryptoArray.push(newCryptoObj);\n              i++;\n          }\n\n          this.setState({cryptoArray: convertedCryptoArray, filteredCryptoArray: convertedCryptoArray});\n\n        })\n    }\n    filterCurrency = () => {\n        \n        let trimmedValue = this.filterInput.value.trim().toUpperCase();\n        let currentCrypto = this.state.cryptoArray;\n        let filteredCrypto = currentCrypto.filter(elem=>{\n            return elem.currency.includes(trimmedValue);\n        });\n        this.setState({filteredCryptoArray: filteredCrypto})\n        console.log(trimmedValue);\n        }\n\n    componentDidMount() {\n        this.getCryptoData();\n        setInterval(() => {this.getCryptoData()}, 5000);\n      }    \n\n    render() {\n       \n        return (\n            <div>\n            <input type=\"text\" placeholder=\"Filtruj...\" onChange={this.filterCurrency} ref={input => this.filterInput = input}></input>\n            <CryptoList cryptoArray={this.state.filteredCryptoArray} filterCurrency={this.filterCurrency}/>\n       </div> \n       )\n    }\n}\n\nexport default Crypto;","import React from 'react';\nimport './App.css';\nimport Crypto from './components/Crypto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <h1>Bitcoin</h1>\n      </header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}